# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2024, Flatpak Team. Licensed under Creative Commons Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flatpak\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-07 23:48+0700\n"
"PO-Revision-Date: 2024-06-16 21:22+0700\n"
"Last-Translator: Harry Mitchell <minhyh0987@gmail.com>\n"
"Language-Team: \n"
"Language: vi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.4.4\n"

#: ../../multiarch.rst:2
msgid "Multiarch support"
msgstr "Hỗ trợ đa kiến trúc (Multiarch support)"

#: ../../multiarch.rst:4
msgid ""
"Flatpak has multiarch/multilib support, but it's not enabled by default and "
"require some additional steps to enable it. This section covers enabling "
"multiarch/multilib in your application bundle."
msgstr ""
"Flatpak có hỗ trợ multiarch/multilib, nhưng nó không được bật theo mặc định "
"và yêu cầu một số bước bổ sung để kích hoạt nó. Phần này đề cập đến việc bật "
"multiarch/multilib trong gói ứng dụng của bạn."

#: ../../multiarch.rst:9
msgid "Running 32-bit programs"
msgstr "Chạy chương trình 32-bit"

#: ../../multiarch.rst:11
msgid ""
"In order to set up the run time environment for 32-bit executables, first "
"you'll need to allow it in ``finish-args``:"
msgstr ""
"Để thiết lập môi trường runtime cho các tệp thực thi (executable) 32-bit, "
"trước tiên bạn cần cho phép nó trong ``finish-args``:"

#: ../../multiarch.rst:19
msgid ""
"This is enough for static binaries, but most real-world GNU/Linux programs "
"are linked dynamically. Those need some shared libraries to work."
msgstr ""
"Việc này là đủ cho các chương trình nhị phân tĩnh (static), nhưng hầu hết "
"các chương trình GNU/Linux trong thực tế đều được liên kết động (linked "
"dynamically). Chúng cần một số thư viện chia sẻ (shared libraries) để hoạt "
"động."

#: ../../multiarch.rst:22
msgid ""
"Freedesktop.org and GNOME SDKs both provide a special flatpak extension with "
"a set of libraries for corresponding architecture. This extension can be "
"attached to an app of different architecture. In order to enable the "
"extension for your app, define an extension point for it in the app manifest:"
msgstr ""
"Freedesktop.org và Gnome SDK đều cung cấp phần mở rộng flatpak đặc biệt với "
"một bộ thư viện cho kiến trúc tương ứng. Phần mở rộng này có thể được đính "
"kèm vào một ứng dụng có kiến trúc khác. Để kích hoạt phần mở rộng cho ứng "
"dụng của bạn, hãy xác định điểm mở rộng cho nó trong tệp kê khai ứng dụng:"

#: ../../multiarch.rst:40
msgid "For GNOME runtime, use ``org.gnome.Platform.Compat.i386`` instead."
msgstr ""
"Đối với GNOME runtime, hãy sử dụng ``org.gnome.Platform.Compat.i386`` thay "
"vào đó."

#: ../../multiarch.rst:42
msgid ""
"Note that this extension ``version`` must match the ``runtime-version`` of "
"the application."
msgstr ""
"Lưu ý rằng ``version`` (phiên bản) của phần mở rộng này phải khớp với "
"``runtime-version`` (phiên bản runtime) của ứng dụng."

#: ../../multiarch.rst:45
msgid ""
"If the 32-bit programs make use of GPU acceleration, or have some graphical "
"UI in general, you'll also need 32-bit GL drivers. Add an extension point "
"for it:"
msgstr ""
"Nếu các chương trình 32 bit sử dụng khả năng tăng tốc GPU (GPU acceleration) "
"hoặc có một giao diện đồ họa nói chung, bạn cũng sẽ cần GL drivers bản 32-"
"bit. Hãy thêm một điểm mở rộng cho nó:"

#: ../../multiarch.rst:63
msgid ""
"Note that the ``versions`` property here must contain both ``1.4`` and the "
"same value as in ``runtime-version``."
msgstr ""
"Lưu ý rằng thuộc tính ``versions`` ở đây phải chứa cả ``1.4`` và một giá trị "
"giống như trong ``runtime-version``."

#: ../../multiarch.rst:66
msgid ""
"Make sure to create directories where the extensions will be mounted (the "
"mount points are specified in ``directory`` properties and are relative to "
"the app bundle mount point, i.e. to ``/app/``). This can be done at stage of "
"the build."
msgstr ""
"Đảm bảo tạo các thư mục nơi các phần mở rộng sẽ được gắn (mount) (các điểm "
"mount được chỉ định trong thuộc tính ``directory`` và tương đối so với điểm "
"mount gói ứng dụng, hay chính là ``/app/``). Điều này có thể được thực hiện "
"ở giai đoạn xây dựng."

#: ../../multiarch.rst:70
msgid ""
"Finally, you need to make the dynamic library loader know the paths to 32-"
"bit libraries. In order to do this, you can install a ``/app/etc/ld.so."
"conf`` file with contents like this:"
msgstr ""
"Cuối cùng, bạn cần làm cho trình tải dynamic library biết đường dẫn đến các "
"thư viện 32-bit. Để thực hiện việc này, bạn có thể cài đặt một tệp ``/app/"
"etc/ld.so.conf`` với nội dung như sau:"

#: ../../multiarch.rst:79
msgid ""
"Here ``/app/lib32`` is the directory where you install additional 32-bit "
"libraries, if any."
msgstr ""
"Ở đây ``/app/lib32`` là thư mục nơi bạn cài đặt thêm các thư viện 32-bit, "
"nếu có."

#: ../../multiarch.rst:82
msgid "You can combine the above two steps in a special module, e.g."
msgstr "Bạn có thể kết hợp hai bước trên trong một mô-đun đặc biệt, ví dụ:"

#: ../../multiarch.rst:103
msgid "Building 32-bit modules"
msgstr "Xây dựng mô-đun 32-bit"

#: ../../multiarch.rst:105
msgid ""
"The section above describes how to run 32-bit programs that are already "
"built. This section will describe the process of building 32-bit components "
"yourself to ship them with the application. It assumes that you are already "
"familiar with building (single-arch) flatpaks. If not, please refer to :doc:"
"`flatpak-builder` guide first."
msgstr ""
"Phần trên mô tả cách chạy các chương trình 32-bit đã được xây dựng. Phần này "
"sẽ mô tả quá trình tự xây dựng các thành phần 32-bit để ship chúng cùng với "
"ứng dụng. Bạn nên đã quen thuộc với việc xây dựng các flatpak (chỉ cho một "
"kiến trúc). Nếu không, vui lòng tham khảo hướng dẫn :doc:`flatpak-builder` "
"trước."

#: ../../multiarch.rst:111
msgid "First of all, you'll need to enable some SDK extensions at build time:"
msgstr ""
"Trước hết, bạn sẽ cần bật một số phần mở rộng SDK tại thời điểm xây dựng:"

#: ../../multiarch.rst:119
msgid ""
"The first one is the 32-bit portion of the SDK, containing 32-bit libraries "
"and development files."
msgstr ""
"Đầu tiên là phần 32-bit của SDK, chứa các thư viện 32-bit và các tệp phát "
"triển (development files)."

#: ../../multiarch.rst:122
msgid ""
"The second one is a cross-compiler. Usually ``gcc -m32`` is used for "
"multilib builds, but the flatpak SDK comes with gcc without multilib "
"support. Thus, you will need a cross-compiler for building x86 on x86_64 "
"just as you would need it for any foreign architecture like aarch64."
msgstr ""
"Cái thứ hai là trình biên dịch chéo (cross-compiler). Thông thường ``gcc -"
"m32`` được sử dụng cho các bản dựng multilib, nhưng flatpak SDK đi kèm với "
"gcc mà không hỗ trợ multilib. Do đó, bạn sẽ cần một trình biên dịch chéo để "
"xây dựng x86 trên x86_64, và bạn cũng sẽ cần nó cho bất kì kiến trúc lạ nào "
"như aarch64."

#: ../../multiarch.rst:127
msgid ""
"In order to build a 32-bit module, some global build options needs to be "
"overridden. Examples here assume that 32-bit libraries are installed in ``/"
"app/lib32`` directory:"
msgstr ""
"Để xây dựng mô-đun 32 bit, một số tùy chọn xây dựng toàn cục (global build "
"options) cần bị ghi đè. Ví dụ ở đây giả định rằng các thư viện 32-bit được "
"cài đặt trong thư mục ``/app/lib32``:"

#: ../../multiarch.rst:149
msgid ""
"These ``build-options`` need to be set for each 32-bit module. If your app "
"manifest is in YAML format, the YAML anchors can come in handy and save you "
"from copy-pasting the same snippet. You can define the 32-bit ``build-"
"options`` object somewhere in the manifest, add an anchor to it, and then "
"point each 32-bit modules' ``build-options`` to that anchor:"
msgstr ""
"Các ``build-options`` này cần được đặt cho mỗi mô-đun 32 bit. Nếu tệp kê "
"khai ứng dụng của bạn ở định dạng YAML, các neo YAML (YAML anchors) có thể "
"hữu ích và giúp bạn không phải sao chép-dán các đoạn mã. Bạn có thể định "
"nghĩa (define) đối tượng ``build-options`` 32-bit ở đâu đó trong tệp kê "
"khai, thêm một anchor cho nó, và sau đó trỏ từng ``build-options`` của các "
"mô-đun 32-bit đến anchor đó:"

#: ../../multiarch.rst:173
msgid ""
"Of course, in order to actually use 32-bit modules you've build, you'll also "
"need all the same setup from the previous section."
msgstr ""
"Tất nhiên, để thực sự sử dụng các mô-đun 32 bit bạn đã xây dựng, bạn cũng sẽ "
"cần tất cả các thiết lập tương tự từ phần trước."
