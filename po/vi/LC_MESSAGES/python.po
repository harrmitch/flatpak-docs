# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-2024, Flatpak Team. Licensed under Creative Commons Attribution 4.0 International License.
# This file is distributed under the same license as the Flatpak package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flatpak\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-06-07 23:48+0700\n"
"PO-Revision-Date: 2024-06-14 23:01+0700\n"
"Last-Translator: Harry Mitchell <minhyh0987@gmail.com>\n"
"Language-Team: \n"
"Language: vi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.4.4\n"

#: ../../python.rst:2
msgid "Python"
msgstr "Python"

#: ../../python.rst:4
msgid ""
"Python applications that use supported build systems like Meson, CMake, or "
"Autotools can be built using the standard method. However, many Python "
"applications use custom install scripts or are expected to be installed "
"through Setuptools and ``pip``."
msgstr ""
"Các ứng dụng Python sử dụng các hệ thống xây dựng (build system) được hỗ trợ "
"như Meson, CMake hoặc Autotools có thể được xây dựng bằng phương pháp tiêu "
"chuẩn. Tuy nhiên, nhiều ứng dụng Python sử dụng các script cài đặt tùy chỉnh "
"hoặc mong muốn được cài đặt thông qua Setuptools và ``pip``."

#: ../../python.rst:9
msgid ""
"For these cases, ``flatpak-builder`` provides the ``simple`` buildsystem. "
"Rather than automating the build process, ``simple`` accepts a ``build-"
"commands`` array of strings, which are executed in sequence."
msgstr ""
"Đối với những trường hợp này, ``flatpak-builder`` cung cấp hệ thống xây dựng "
"``simple``. Thay vì tự động hóa quá trình xây dựng, ``simple`` chấp nhận một "
"chuỗi ``build-commands`` để được thực thi theo trình tự."

#: ../../python.rst:13
msgid ""
"For example, the following YAML makes building the popular requests module "
"rather straightforward:"
msgstr ""
"Ví dụ: YAML sau đây làm cho việc xây dựng mô-đun requests phổ biến khá đơn "
"giản:"

#: ../../python.rst:27
msgid ""
"Here, ``build-commands`` is an array containing the commands required to "
"build and install the module. As can be seen, in this case ``pip`` is run to "
"do this. Here, the ``--prefix=/app`` option is important, because otherwise "
"``pip`` would try to install the module under ``/usr/`` which, because ``/"
"usr/`` is mounted read-only inside the sandbox, would fail."
msgstr ""
"Ở đây, ``build-commands`` là một danh sách chứa các lệnh cần thiết để xây "
"dựng và cài đặt mô-đun. Có thể thấy, trong trường hợp này ``pip`` được chạy "
"để làm điều đó. Ở đây, tùy chọn ``--prefix=/app`` rất quan trọng, bởi vì nếu "
"không ``pip`` sẽ cố gắng cài đặt mô-đun trong ``/usr/``, và vì ``/usr/`` là "
"chỉ đọc (read-only) bên trong hộp cát nên sẽ không thành công."

#: ../../python.rst:33
msgid ""
"Note that ``--no-deps`` is only used for the purpose of the example - since "
"the requests module has its own dependencies, the build would fail. If "
"multiple dependencies are required, it is better to install them using the "
"method in the next section, instead."
msgstr ""
"Lưu ý rằng ``--no-deps`` chỉ được sử dụng cho mục đích của ví dụ - vì mô-đun "
"yêu cầu có các dependency riêng, bản dựng sẽ thất bại. Nếu cần nhiều "
"dependency, sẽ tốt hơn là cài đặt chúng bằng phương thức trong phần tiếp "
"theo."

#: ../../python.rst:39
msgid "Building multiple Python dependencies"
msgstr "Xây dựng nhiều Python dependencies"

#: ../../python.rst:41
msgid ""
"Even though the example above installs, it won't actually work. This is "
"because the requests module has a number of dependencies that haven't been "
"installed:"
msgstr ""
"Mặc dù ví dụ trên có thể cài đặt, nó sẽ không thực sự hoạt động. Điều này là "
"do mô-đun requests có một số dependency chưa được cài đặt:"

#: ../../python.rst:44
msgid "certifi"
msgstr "certifi"

#: ../../python.rst:45
msgid "chardet"
msgstr "chardet"

#: ../../python.rst:46
msgid "idna"
msgstr "idna"

#: ../../python.rst:47
msgid "urllib3"
msgstr "urllib3"

#: ../../python.rst:49
msgid ""
"Four dependencies aren't very many, and could be installed using the "
"``simple`` method described above. However, anything more complex than this "
"would quickly become tedious."
msgstr ""
"Bốn dependency không phải là quá nhiều và có thể được cài đặt bằng phương "
"pháp ``simple`` được mô tả ở trên. Tuy nhiên, bất cứ thứ gì phức tạp hơn thế "
"này sẽ nhanh chóng trở nên mệt nhọc."

#: ../../python.rst:53
msgid ""
"For these cases, `flatpak-pip-generator <https://github.com/flatpak/flatpak-"
"builder-tools/tree/master/pip>`_ can be used to generate the necessary "
"manifest JSON. This is a Python script that takes a package name and uses "
"``pip`` to identify its dependencies, along with their tarball URLs and "
"hashes."
msgstr ""
"Đối với những trường hợp này, `flatpak-pip-generator <https://github.com/"
"flatpak/flatpak-builder-tools/tree/master/pip>`_ có thể được sử dụng để tạo "
"phần kê khai dạng JSON (manifest JSON) cần thiết. Đây là một Python script "
"nhận vào tên của gói, và sử dụng ``pip`` để xác định các dependency cùng với "
"các tarball URL và hash của nó."

#: ../../python.rst:59
msgid "Using ``flatpak-pip-generator`` is as simple as running::"
msgstr "Sử dụng ``flatpak-pip-generator`` chỉ đơn giản như là::"

#: ../../python.rst:63
msgid ""
"Or if you have a ``requirements.txt`` file you can generate modules for "
"every listed package::"
msgstr ""
"Hoặc nếu bạn có tệp ``requirements.txt``, bạn có thể tạo mô-đun cho mọi gói "
"được liệt kê::"

#: ../../python.rst:68
msgid ""
"This will output a file called ``python3-requests.json``, containing the "
"necessary manifest JSON, which can then be included in your application's "
"manifest file. Even if your manifest uses YAML, you can still include JSON "
"like this::"
msgstr ""
"Nó sẽ xuất ra một tệp có tên là ``python3-requests.json``, chứa phần kê khai "
"dạng JSON cần thiết, sau đó có thể đưa nó vào tệp kê khai của ứng dụng của "
"bạn. Ngay cả khi tệp kê khai của bạn sử dụng YAML, bạn vẫn có thể bao gồm "
"JSON như sau::"
